# -*- coding: utf-8 -*-
"""langchain-rag (2).ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1iZW5RoiXlRIkOSlTwTxSxQHIy9eslZ6T
"""

# This Python 3 environment comes with many helpful analytics libraries installed
# It is defined by the kaggle/python Docker image: https://github.com/kaggle/docker-python
# For example, here's several helpful packages to load

import numpy as np # linear algebra
import pandas as pd # data processing, CSV file I/O (e.g. pd.read_csv)

# Input data files are available in the read-only "../input/" directory
# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory

import os
for dirname, _, filenames in os.walk('/kaggle/input'):
    for filename in filenames:
        print(os.path.join(dirname, filename))

# You can write up to 20GB to the current directory (/kaggle/working/) that gets preserved as output when you create a version using "Save & Run All"
# You can also write temporary files to /kaggle/temp/, but they won't be saved outside of the current session

!git clone https://github.com/AGAMPANDEYY/Sarcasm-Detection-Tensorflow.git

!pip install torch>=1.10.0
!pip install transformers
!pip install accelerate
!pip install peft
!pip install trl
!pip install -r /content/requirments.txt
!pip install accelerate
!pip install -i https://pypi.org/simple/ bitsandbytes
!pip install datasets==2.16.0
!pip install --upgrade datasets

"""Loading the Model"""

from torch import cuda, bfloat16
import transformers

device = f'cuda:{cuda.current_device()}' if cuda.is_available() else 'cpu'

model_id="meta-llama/Llama-2-7b-chat-hf"

bnb_config=transformers.BitsAndBytesConfig(
    load_in_4bit=True,
    bnb_4bit_quant_type='nf4',
    bnb_4bit_use_double_quant=True,
    bnb_4bit_compute_dtype=bfloat16
)

hf_auth ="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"
model_config = transformers.AutoConfig.from_pretrained(
    model_id,
    use_auth_token=hf_auth
)

model = transformers.AutoModelForCausalLM.from_pretrained(
    model_id,
    trust_remote_code=True,
    config=model_config,
    quantization_config=bnb_config,
    device_map='auto',
    use_auth_token=hf_auth
)

model.eval()

from transformers import AutoTokenizer

tokenizer=AutoTokenizer.from_pretrained(model_id, use_auth_token=hf_auth)
tokenizer.pad_token=tokenizer.eos_token

!pip install --upgrade datasets --progressbar off

from datasets import load_dataset

import os

dataset=load_dataset("AgamP/sarcasm-detection",data_files={"train": "Sarcasm_Headlines_Dataset.json", "test":"Sarcasm_Headlines_Dataset_v2.json"})

dataset["train"][1]

"""Fixing the dataset, it does not have proper format of json"""

data=dataset['train']
data1=""
# Add commas after all dictionaries except the last one
for i in range(len(data) - 1):
  json_string = json.dumps(data[i])
  data1=data1+json_string + ","

with open ("sarcasm-detection-train.json","w") as f:
    json.dump(data1,f)

with open ("train.txt","w") as f:
    f.write(data1)
f.close()



import json
with open("/content/train (2).json", "r") as json_file:
    train_data = json.load(json_file)

import json

# Open the JSON file
with open("/content/train (2).json", "r") as json_file:
    # Initialize an empty list to store parsed JSON objects
    json_data = []

    # Iterate over each line in the file
    for line in json_file:
        # Parse each line as JSON and append it to the list
        json_data.append(json.loads(line))

"""Fine tuning"""

import torch
import peft
from peft import (LoraConfig, get_peft_model,get_peft_model_state_dict,
    set_peft_model_state_dict,)
from transformers import TrainingArguments,Trainer

from trl import SFTTrainer

from peft import prepare_model_for_kbit_training

model.gradient_checkpointing_enable()
model=prepare_model_for_kbit_training(model)

def print_trainable_parameters(model):
    """
    Prints the number of trainable parameters in the model.
    """
    trainable_params = 0
    all_param = 0
    for _, param in model.named_parameters():
        all_param += param.numel()
        if param.requires_grad:
            trainable_params += param.numel()
    print(
        f"trainable params: {trainable_params} || all params: {all_param} || trainable%: {100 * trainable_params / all_param}"
    )

!pip install accelerate

from accelerate import FullyShardedDataParallelPlugin, Accelerator
from torch.distributed.fsdp.fully_sharded_data_parallel import FullOptimStateDictConfig, FullStateDictConfig

fsdp_plugin = FullyShardedDataParallelPlugin(
    state_dict_config=FullStateDictConfig(offload_to_cpu=True, rank0_only=False),
    optim_state_dict_config=FullOptimStateDictConfig(offload_to_cpu=True, rank0_only=False),
)

#accelerator = Accelerator(fsdp_plugin=fsdp_plugin)

from peft import LoraConfig, get_peft_model


config = LoraConfig(
    r=8,
    lora_alpha=16,
    target_modules=[
        "q_proj",
        "k_proj",
        "v_proj",
        "o_proj",
        "gate_proj",
        "up_proj",
        "down_proj",
        "lm_head",
    ],
    bias="none",
    lora_dropout=0.05,  # Conventional
    task_type="CAUSAL_LM",
)

model = get_peft_model(model, config)
print_trainable_parameters(model)

# Apply the accelerator. You can comment this out to remove the accelerator.
#model = accelerator.prepare_model(model)

!pip install -q wandb -U

import wandb, os
wandb.login()

wandb_project = "llama-sarcasm-detection-finetune"
if len(wandb_project) > 0:
    os.environ["WANDB_PROJECT"] = wandb_project

!pip install torch>=1.10.0

!pip install --upgrade accelerate

import transformers
from datetime import datetime

project = "llama-sarcasm-detection-finetune"
base_model_name = "llama2-7b"
run_name = base_model_name + "-" + project
output_dir = "./" + run_name

tokenizer.pad_token = tokenizer.eos_token

with open ("/content/train (2).json","r") as f:
  data1=json.dump(f)

import json

# Open the JSON Lines file and read its contents line by line
with open("/content/Sarcasm_Headlines_Dataset.json", "r") as file:
    # Initialize an empty list to store the parsed JSON objects
    data = []

    # Read each line and parse it as JSON
    for line in file:
        # Parse the JSON object and append it to the list
        data.append(json.loads(line))

data[1]

import pandas as pd
df = pd.DataFrame(data)
dataset = Dataset.from_pandas(df)

dataset[1:3]

!pip install datasets

from datasets import load_dataset
data=load_dataset("raquiba/Sarcasm_News_Headline",data_files={"train":"train.json","test":"test.json"})

data

train_data_headline=data['train']['headline']
test_data_headline=data['test']['headline']
train_data_boolean=data['train']['is_sarcastic']
test_data_boolean=data['test']['is_sarcastic']

train_data_dict=dict(zip(train_data_headline,train_data_boolean))
test_data_dict=dict(zip(test_data_headline,test_data_boolean))

train_data_tuple=tuple(train_data_dict.items())

test_data_tuple=tuple(test_data_dict.items())

train_data_tuple

"""converting this into .jsonl file format"""

with open("train.jsonl","w") as f:
   for headline,is_sarcastic in train_data_tuple:
        json_obj = {"headline": headline, "is_sarcastic": is_sarcastic}
        json.dump(json_obj, f)
        f.write('\n')  # Add newline character to separate JSON objects

with open("test.jsonl","w") as f:
   for headline,is_sarcastic in test_data_tuple:
        json_obj = {"headline": headline, "is_sarcastic": is_sarcastic}
        json.dump(json_obj, f)
        f.write('\n')  # Add newline character to separate JSON objects

path="/content/train.jsonl"
train_dataset=load_dataset("json",data_files=path,split="train")

path="/content/test.jsonl"
test_dataset=load_dataset("json",data_files=path)

def generate_prompt(data_point):
  return f"""
<human>: {data_point["headline"]}
<assistance>: {data_point["is_sarcastic"]}
  """.strip()

def generate_and_tokenize_prompt(data_point):
  full_prompt = generate_prompt(data_point)
  print(full_prompt)
  tokenized_full_prompt = tokenizer(full_prompt,padding=True, truncation=True)
  return tokenized_full_prompt

train_dataset =train_dataset.shuffle().map(generate_and_tokenize_prompt)

test_dataset=test_dataset.shuffle().map(generate_and_tokenize_prompt)

"""Problem with eval dataset need test split something like that

error: KeyError: "Invalid key: 0. Please first select a split. For example: `my_dataset_dictionary['train'][0]`. Available splits: ['train']"
"""

trainer = transformers.Trainer(
    model=model,
    train_dataset=train_dataset,
    #eval_dataset=test_dataset,
    #use_seedable_sampler=False,
    args=transformers.TrainingArguments(
        output_dir=output_dir,
        warmup_steps=1,
        per_device_train_batch_size=2,
        gradient_checkpointing=True,
        gradient_accumulation_steps=4,
        max_steps=100,
        learning_rate=2.5e-5,
        logging_steps=5,
        #bf16=True,
        optim="paged_adamw_8bit",
        logging_dir="./logs",        # Directory for storing logs
        save_strategy="steps",       # Save the model checkpoint every logging step
        save_steps=5,                # Save checkpoints every 50 steps
        #evaluation_strategy="steps", # Evaluate the model every logging step
        #eval_steps=5,               # Evaluate and save checkpoints every 50 steps
        #do_eval=True,                # Perform evaluation at the end of training
        report_to="wandb",           # Comment this out if you don't want to use weights & baises
        run_name=f"{run_name}-{datetime.now().strftime('%Y-%m-%d-%H-%M')}"          # Name of the W&B run (optional)
    ),
    data_collator=transformers.DataCollatorForLanguageModeling(tokenizer, mlm=False),
)

model.config.use_cache = False  # silence the warnings. Please re-enable for inference!
trainer.train()

from huggingface_hub import notebook_login
notebook_login()

model.save_pretrained("trained-llama-sarcasm")

model.push_to_hub("AgamP/llama-sarcasm",use_auth_token=True)

